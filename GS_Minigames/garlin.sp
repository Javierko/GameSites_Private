/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>

#include <emitsoundany.inc>
#include <cstrike>
#include <smlib>
#include <sdkhooks>

#define RESPAWN_TIMER 2.0
#define RESPAWN_TIMER2 10.0
#define KONEC_SPAWNOVANIA 28.0
new maximumplayers
new count_player
new count_alive
//new String:named[64]
//new konec_kola
new Handle: spawnplayer[MAXPLAYERS+1] = INVALID_HANDLE
new Handle: konec_respawnu = INVALID_HANDLE
//new over_respawn
new onnoclip[MAXPLAYERS+1]
new bool:b_Hide[MAXPLAYERS+1];
new nezobrazovat_menu[MAXPLAYERS+1]

public Plugin:myinfo =
{
 name = "New Plugin",
 author = "Unknown",
 description = "<- Description ->",
 version = "1.0",
 url = "<- URL ->"
}

public OnPluginStart()
{
 HookEvent("player_spawn", event_Spawn);
 AddCommandListener(Command_JoinTeam, "jointeam");
 HookEvent("round_start", roundStart);
 HookEvent("round_end", roundEnd_event);
 HookEvent("player_death", playerDeath);
 AddCommandListener(HookPlayerChat, "say");
 HookEvent("player_connect_full", Event_OnFullConnect, EventHookMode_Pre);
}
public OnMapStart()
{
 AddFileToDownloadsTable("sound/jbextreme/brass_bell_C.mp3");
 PrecacheSoundAny("jbextreme/brass_bell_C.mp3");
 maximumplayers = GetMaxClients();
 char mapname[120];
 GetCurrentMap(mapname, sizeof(mapname));
 if(StrContains(mapnamem, "mg_acrophobia_run_v1|mg_escape_castle_v2|mg_circle_course")) ServerCommand("mp_roundtime 10");
 if(StrEqual(mapname,"mg_savetheisland_course_final"))
 {
   ServerCommand("mp_roundtime 10");
 }
 if(StrEqual(mapname,"mg_basement_course_final"))
 {
   ServerCommand("mp_roundtime 10");
 }
 if(StrEqual(mapname,"mg_draw_trolledition_beta"))
 {
   ServerCommand("mp_roundtime 10");
 }
 if(StrEqual(mapname,"mg_mario_course_v1_1"))
 {
   ServerCommand("mp_roundtime 10");
 }

 ServerCommand("mp_solid_teammates 0");
 /*new String:mapname[120]
 GetCurrentMap(mapname, 119)
 if(StrEqual(mapname,"mg_acrophobia_run_v11") )
 {
   ServerCommand("sv_gravity 750");
 }
 else
 {
   ServerCommand("sv_gravity 800");
 }*/

}
public OnClientPutInServer(client)
{
 if(!IsValidClient(client))
   return
 SDKHook(client, SDKHook_SetTransmit, Hook_SetTransmit);
 SetClientListeningFlags(client, VOICE_MUTED)
 //SDKHook(client, SDKHook_Touch, OnTouch);
 onnoclip[client] = 0
 nezobrazovat_menu[client] = 0
}

public OnTouch(client, other)
{
 if(!IsValidClient(client))
 return
 if(!IsValidClient(other))
 return
 if(client == other)
 return
 new Float:clientposition[3];
 GetClientAbsOrigin(client, clientposition)
 new Float:clientposition2[3];
 GetClientAbsOrigin(other, clientposition2)


//PrintToChat(client, "%f - %f /// %f - %f /// %f - %f", clientposition[0], clientposition2[0],clientposition[1], clientposition2[1],clientposition[2], clientposition2[2])
 //new Float: osy = clientposition[1]	- clientposition2[1]
 //new Float: osx = clientposition[0]	- clientposition2[0]
 new Float: vysledok
 //vysledok = osy*osy + osx*osx
 vysledok = GetVectorDistance(clientposition,clientposition2)
 if(vysledok < 50.0)
 {
 SetEntProp(client, Prop_Data, "m_CollisionGroup", 2);

 }
 //CreateTimer(2.0,remove,client)


}
public Action: remove(Handle: time, any client)
SetEntProp(client, Prop_Data, "m_CollisionGroup", COLLISION_GROUP_NONE);
stock IsValidClient(client, bool:replaycheck = true)
{
 if(client <= 0 || client > maximumplayers)
   {
       return false;
   }
 if(!IsClientInGame(client))
   {
       return false;
   }

 if(replaycheck)
 {
 if(IsClientSourceTV(client) || IsClientReplay(client)) return false;
 }
 return true;
}
public Action:event_Spawn(Handle:event, const String:name[], bool:dontBroadcast)
{

 new client = GetClientOfUserId(GetEventInt(event, "userid"));
 CS_SetClientClanTag(client, "");
 SetClientListeningFlags(client, VOICE_NORMAL)
 SetClientMoneyPlus(client,10000)

 if(nezobrazovat_menu[client] == 0)
 menu_main(client)
 SetEntProp(client, Prop_Data, "m_takedamage", 0, 1)
 CreateTimer(8.0, cancel_godmode, client)
 SetEntProp(client, Prop_Data, "m_CollisionGroup", 2);
}
public Action: cancel_godmode(Handle: timer, any client)
{
 SetEntProp(client, Prop_Data, "m_takedamage", 2, 1)
}
public Action:roundStart(Handle:event, const String:name[], bool:dontBroadcast)
{
 ClearTimer(konec_respawnu)
 ServerCommand("mp_autokick 0")
 //over_respawn = 1
 //konec_kola = 0


}
public Action:roundEnd_event(Handle:event, const String:name[], bool:dontBroadcast)
{
 //konec_kola = 1
}
public Action:playerDeath(Handle:event, const String:name[], bool:dontBroadcast)
{

 new client = GetClientOfUserId(GetEventInt(event, "userid")); // Get the dead clients id
 //new attaker = GetClientOfUserId(GetEventInt(event, "attacker"));
 //new assistent = GetClientOfUserId(GetEventInt(event, "assister"));

 if(!IsValidClient(client))
 return


 new String:mapname[120]
 GetCurrentMap(mapname, 119)


 if(StrEqual(mapname,"mg_acrophobia_run_v1") )
 {
 spawnplayer[client] = CreateTimer(RESPAWN_TIMER, respawnplayer, client)
 }
 if(StrEqual(mapname,"mg_escape_castle_v2"))
 {
 spawnplayer[client] = CreateTimer(RESPAWN_TIMER, respawnplayer, client)
 }
 if(StrEqual(mapname,"mg_savetheisland_course_final"))
 {
 spawnplayer[client] = CreateTimer(RESPAWN_TIMER, respawnplayer, client)
 }
 if(StrEqual(mapname,"mg_circle_course"))
 {
 spawnplayer[client] = CreateTimer(RESPAWN_TIMER, respawnplayer, client)
 }
 if(StrEqual(mapname,"mg_mario_course_v1_1"))
 {
 spawnplayer[client] = CreateTimer(RESPAWN_TIMER, respawnplayer, client)
 }
 if(StrEqual(mapname,"mg_office_coursee"))
 {
 spawnplayer[client] = CreateTimer(RESPAWN_TIMER, respawnplayer, client)
 }
 if(StrEqual(mapname,"mg_basement_course_final"))
 {
 spawnplayer[client] = CreateTimer(RESPAWN_TIMER, respawnplayer, client)
 }
 if(StrEqual(mapname,"mg_draw_trolledition_beta"))
 {
 spawnplayer[client] = CreateTimer(RESPAWN_TIMER, respawnplayer, client)
 }

 SetClientListeningFlags(client, VOICE_MUTED)
 count_players()

}
public OnClientDisconnect(client)
{
 count_players()
 SDKUnhook(client, SDKHook_Touch, OnTouch);
 count_players()
}
public Action:count_players()
{
 new maxplayers
 maxplayers = GetMaxClients()
 count_alive = 0
 count_player = 0

 for (new idx = 1; idx <= maxplayers; idx++)
 {
   if(!IsValidClient(idx))
     continue
   if(IsClientInGame(idx))
   {
     if (IsPlayerAlive(idx))
     {
     count_alive++
     }
     count_player++
   }
 }

 if (count_alive == 2 && count_player > 3)
 {

 PrintHintTextToAll("<font color='#FF0000' size='30'>POSLEDNI DVA HRACI!</font>")
 EmitSoundToAllAny("jbextreme/brass_bell_C.mp3");
 }
}
public Action:Command_JoinTeam(client, const String:command[], args)
{
 if (!client)
   return Plugin_Continue;
 //count_players()

 return Plugin_Continue;
}
public Action:HookPlayerChat(client, const String:command[], args)
{
 new String:szText[256];
 GetCmdArg(1, szText, sizeof(szText));
 if(StrEqual(szText,"/noclip"))
 {
     if (GetUserFlagBits(client) & ADMFLAG_BAN)
     {
       if(onnoclip[client] == 0)
       {
         onnoclip[client] = 1
         SetEntityMoveType(client, MOVETYPE_NOCLIP)
       }
       else
       {
         onnoclip[client] = 0
         SetEntityMoveType(client, MOVETYPE_WALK)
       }
     }
     return Plugin_Handled
 }
 if(StrEqual(szText,"/menu"))
 {
     nezobrazovat_menu[client] = 0
     menu_main(client)
     return Plugin_Handled
 }
 if(StrEqual(szText,"/info"))
 {

     decl String:itemsurl[128];
     Format(itemsurl, sizeof(itemsurl), "http://fastdownload.gamesites.cz/global/motd/info_minigames.html");
     ShowMOTDPanel(client, "Backpack", itemsurl, MOTDPANEL_TYPE_URL);
     return Plugin_Handled
 }
 if(StrEqual(szText,"/pravidla"))
 {

     decl String:itemsurl[128];
     Format(itemsurl, sizeof(itemsurl), "http://fastdownload.gamesites.cz/global/motd/info_minigames.html");
     ShowMOTDPanel(client, "Backpack", itemsurl, MOTDPANEL_TYPE_URL);
     return Plugin_Handled
 }
 if(StrEqual(szText,"/hide"))
 {
   new String:mapname[120]
   GetCurrentMap(mapname, 119)
   if(StrEqual(mapname,"mg_acrophobia_run_v1") )
   {
     Z_Hide(client)
   }
   if(StrEqual(mapname,"mg_escape_castle_v2"))
   {
     Z_Hide(client)
   }
   if(StrEqual(mapname,"mg_circle_course"))
   {
     Z_Hide(client)
   }
   if(StrEqual(mapname,"mg_savetheisland_course_final"))
   {
     Z_Hide(client)
   }
   if(StrEqual(mapname,"mg_basement_course_final"))
   {
     Z_Hide(client)
   }
   if(StrEqual(mapname,"mg_draw_trolledition_beta"))
   {
     Z_Hide(client)
   }
   if(StrEqual(mapname,"mg_mario_course_v1_1"))
   {
     Z_Hide(client)
   }
   return Plugin_Handled
 }
 return Plugin_Continue

}
public Action: respawnplayer(Handle: time, any: client)
{
 if(!IsValidClient(client))
   return
 if(spawnplayer[client] != INVALID_HANDLE)
   spawnplayer[client] = INVALID_HANDLE

 if (!IsPlayerAlive(client))
 {
   CS_RespawnPlayer(client);
 }


}
public Action: respawnplayer_over(Handle: time)
{

 if(konec_respawnu != INVALID_HANDLE)
 konec_respawnu = INVALID_HANDLE
 //over_respawn = 1


}
stock ClearTimer(&Handle:timer)
{
   if (timer != INVALID_HANDLE)
   {
       KillTimer(timer);
       timer = INVALID_HANDLE;
   }
}
public Action:menu_main(clientId)
{
 if(!IsValidClient(clientId))
   return Plugin_Continue

 new Handle:menu = CreateMenu(menu_main_handler);
 SetMenuTitle(menu, "Hlavni menu - /menu");
 new String:mapname[120]
 GetCurrentMap(mapname, 119)
 if(StrEqual(mapname,"mg_acrophobia_run_v1") )
 {
 AddMenuItem(menu, "option2", "Respawn / Odseknuti");
 if (!b_Hide[clientId])
   AddMenuItem(menu, "option4", "Vypni zobrazeni hracu [ZAPNUTE]");
 else
   AddMenuItem(menu, "option4", "Vypni zobrazeni hracu [VYPNUTE]");
 }
 if(StrEqual(mapname,"mg_escape_castle_v2"))
 {
   AddMenuItem(menu, "option2", "Respawn / Odseknuti");
   if (!b_Hide[clientId])
   AddMenuItem(menu, "option4", "Vypni zobrazeni hracu [ZAPNUTE]");
   else
   AddMenuItem(menu, "option4", "Vypni zobrazeni hracu [VYPNUTE]");
 }
 if(StrEqual(mapname,"mg_circle_course"))
 {
   AddMenuItem(menu, "option2", "Respawn / Odseknuti");
   if (!b_Hide[clientId])
   AddMenuItem(menu, "option4", "Vypni zobrazeni hracu [ZAPNUTE]");
   else
   AddMenuItem(menu, "option4", "Vypni zobrazeni hracu [VYPNUTE]");
 }
 if(StrEqual(mapname,"mg_savetheisland_course_final"))
 {
   AddMenuItem(menu, "option2", "Respawn / Odseknuti");
   if (!b_Hide[clientId])
   AddMenuItem(menu, "option4", "Vypni zobrazeni hracu [ZAPNUTE]");
   else
   AddMenuItem(menu, "option4", "Vypni zobrazeni hracu [VYPNUTE]");
 }
 if(StrEqual(mapname,"mg_basement_course_final"))
 {
   AddMenuItem(menu, "option2", "Respawn / Odseknuti");
   if (!b_Hide[clientId])
   AddMenuItem(menu, "option4", "Vypni zobrazeni hracu [ZAPNUTE]");
   else
   AddMenuItem(menu, "option4", "Vypni zobrazeni hracu [VYPNUTE]");
 }
 if(StrEqual(mapname,"mg_draw_trolledition_beta"))
 {
   AddMenuItem(menu, "option2", "Respawn / Odseknuti");
   if (!b_Hide[clientId])
   AddMenuItem(menu, "option4", "Vypni zobrazeni hracu [ZAPNUTE]");
   else
   AddMenuItem(menu, "option4", "Vypni zobrazeni hracu [VYPNUTE]");
 }
 if(StrEqual(mapname,"mg_mario_course_v1_1"))
 {
   AddMenuItem(menu, "option2", "Respawn / Odseknuti");
   if (!b_Hide[clientId])
   AddMenuItem(menu, "option4", "Vypni zobrazeni hracu [ZAPNUTE]");
   else
   AddMenuItem(menu, "option4", "Vypni zobrazeni hracu [VYPNUTE]");
 }
 AddMenuItem(menu, "option5", "Nezobrazovat menu");


 AddMenuItem(menu, "option3", "Info o mapach / atrakcich");






 SetMenuExitButton(menu, true);
 DisplayMenu(menu, clientId, MENU_TIME_FOREVER);
 return Plugin_Handled;
}
public menu_main_handler(Handle:menu, MenuAction:action, client, itemNum)
{
 if(!IsValidClient(client))
   return ;

 if ( action == MenuAction_Select )
 {
   new String:info[32];
   GetMenuItem(menu, itemNum, info, sizeof(info));
   if ( strcmp(info,"option2") == 0 )
   {
       //if(over_respawn == 0)
       {
         ForcePlayerSuicide(client);

         PrintHintText(client,"<font color='#00FF00' size='20'>Ozivil jsi se !</font><br><font color='#FFFFFF' size='30'>30 sekund</font>")


       }
     //	else
       //PrintHintText(client,"<font color='#00FF00' size='20'>Funguje jenom prvnich:</font><br><font color='#FFFFFF' size='30'>30 sekund</font>")
       //menu_main(client)

   }
   else
   if ( strcmp(info,"option3") == 0 )
   {
     decl String:itemsurl[128];
     Format(itemsurl, sizeof(itemsurl), "http://fastdownload.gamesites.cz/global/motd/info_minigames.html");
     ShowMOTDPanel(client, "Backpack", itemsurl, MOTDPANEL_TYPE_URL);
     menu_main(client)

   }
   else
   if ( strcmp(info,"option4") == 0 )
   {
     Z_Hide(client)
     menu_main(client)

   }
   else
   if ( strcmp(info,"option5") == 0 )
   {
     nezobrazovat_menu[client] = 1

   }



 }

}
stock SetClientMoneyPlus(client,hodnota)
{
 if(!IsValidClient(client))
 return ;
 if(IsClientInGame(client))
 {
 new money = GetEntProp(client, Prop_Send, "m_iAccount") + hodnota;
 if (money <= 12000)
 SetEntProp(client, Prop_Send, "m_iAccount", money);
 else
 SetEntProp(client, Prop_Send, "m_iAccount", 200);
 }
}
//hide plugin
public OnClientPostAdminCheck(client)
{
 if (!IsClientInGame(client) || IsFakeClient(client))
   return;

 b_Hide[client] = false;
}

public Action:Hook_SetTransmit(entity, client)
{
   if (client != entity && (0 < entity <= MaxClients) && IsClientInGame(client) && b_Hide[client])
       return Plugin_Handled;

   return Plugin_Continue;
}

public Action:Z_Hide(client)
{
 if (!b_Hide[client])
 b_Hide[client] = true;
 else
 b_Hide[client] = false;
 return Plugin_Handled;
}

//hide plugin konec
public Action:Event_OnFullConnect(Handle:event, const String:name[], bool:dontBroadcast)
{
 new client = GetClientOfUserId(GetEventInt(event, "userid"));
 if(!client || !IsClientInGame(client))
   return Plugin_Continue;
 new String:mapname[120]
 GetCurrentMap(mapname, 119)
 if(StrEqual(mapname,"mg_acrophobia_run_v1") )
 {
   ChangeClientTeam(client, 3);
   spawnplayer[client] = CreateTimer(RESPAWN_TIMER2, respawnplayer, client)
 }
 if(StrEqual(mapname,"mg_escape_castle_v2"))
 {
   ChangeClientTeam(client, 3);
   spawnplayer[client] = CreateTimer(RESPAWN_TIMER2, respawnplayer, client)
 }
 if(StrEqual(mapname,"mg_circle_course"))
 {
   ChangeClientTeam(client, 2);
   spawnplayer[client] = CreateTimer(RESPAWN_TIMER2, respawnplayer, client)
 }
 if(StrEqual(mapname,"mg_savetheisland_course_final"))
 {
   ChangeClientTeam(client, 2);
   spawnplayer[client] = CreateTimer(RESPAWN_TIMER2, respawnplayer, client)
 }
 if(StrEqual(mapname,"mg_basement_course_final"))
 {
   ChangeClientTeam(client, 2);
   spawnplayer[client] = CreateTimer(RESPAWN_TIMER2, respawnplayer, client)
 }
 if(StrEqual(mapname,"mg_draw_trolledition_beta"))
 {
   ChangeClientTeam(client, 3);
   spawnplayer[client] = CreateTimer(RESPAWN_TIMER2, respawnplayer, client)
 }
 if(StrEqual(mapname,"mg_mario_course_v1_1"))
 {
   ChangeClientTeam(client,2);
   spawnplayer[client] = CreateTimer(RESPAWN_TIMER2, respawnplayer, client)
 }
 return Plugin_Continue;
}
